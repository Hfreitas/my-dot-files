alias ls='ls -FG'
alias ll='ls -lah'
alias ..='cd ..;' 
alias ...='.. ..'
alias g='grep -i' 
alias h='history|g'
alias ducks='du -cks * | sort -rn|head -11'
alias top='top -o cpu'
alias v='mvim'
alias reload="cd .. && cd -"

alias et="m"

alias home='cd ~' # the tilda is too hard to reach
alias systail='tail -f -n0 /var/log/system.log'
alias aptail='tail -f -n0 /var/log/apache*/*log'
alias l='ls'
alias dbc='cat config/database.yml'

alias c='clear' # shortcut to clear your terminal

alias sprof='source ~/.zshrc'
alias sinstall='ruby ~/Sites/dot-files/install.rb && sprof'

# useful command to find what you should be aliasing:
alias profileme="history | awk '{print \$2}' | awk 'BEGIN{FS=\"|\"}{print \$1}' | sort | uniq -c | sort -n | tail -n 20 | sort -nr"

# rails stuff
alias log='tail -f -0 ./log/*.log'
alias tailf="tail -f"
alias asp='autospec'
alias ss='script/server'
alias sc='ruby ./script/console'
alias dot='vim ~/Sites/MyApps/dot-files/'
alias cdm='cap deploy deploy:migrate'
alias cpd='cap production deploy'
alias cpds='cap production deploy:setup'
alias csd='cap staging deploy'
alias csds='cap staging deploy:setup'
alias model='script/generate model'
alias mailer='script/generate mailer'
alias controller='script/generate controller'
alias migration='rails g migration'
alias tmigrate='rake db:migrate > /dev/null && echo "Migrating test env" && RAILS_ENV=test rake db:migrate > /dev/null && say Finish him'
alias driver="ack 'page.driver.render' spec/requests"
alias migrate='tmigrate'
alias trollback='rake db:rollback && RAILS_ENV=test rake db:rollback > /dev/null'
alias rollback='rake db:rollback > /dev/null && RAILS_ENV=test rake db:rollback > /dev/null'
alias webshare='python -c "import SimpleHTTPServer;SimpleHTTPServer.test()"'
alias sconf='mate ~/.ssh/config'
alias r='rails'
alias b='bundle'
alias bx='b exec'
alias dfolha="fab -R staging deploy"
alias itsel='bundle exec infinity_test --test-unit'
alias itcap='CI=true itsel'
alias gcap='CI=true guard'
# alias run='rm -f tmp/capybara/* && clear && CI=true rspec'
# alias run_units='run spec/business && run spec/models'
alias uni="rails s puma -p 8080 -d"
alias fs="foreman start"
alias u="uni"
alias ku="ps aux | grep 'rails s' | grep 'grep' -v | cut -c13-23 | xargs kill -9"
alias ru="ku && u"
alias music='mpg123 -z -C -@ ~/List.lst'
alias couchlog='tail -f /usr/local/var/log/couchdb/couch.log'
alias cassandraconf='mate /opt/cassandra/conf/storage-conf.xml'
alias mongolog='tail -f ~/Sites/Codes/homebrew/Cellar/mongodb/1.2.3-x86_64/mongodb.log'
alias tomcat='sh /Library/Tomcat/Home/bin/startup.sh'
alias sshconfig='mate ~/.ssh/config'

alias pubkey='cat ~/.ssh/*.pub'
alias mhosts='mate ~/.ssh/config'
alias smongo='mongod -f ~/Sites/Codes/homebrew/Cellar/mongodb/1.2.3-x86_64/mongod.conf --fork --logpath /~/Sites/Codes/homebrew/Cellar/mongodb/1.2.3-x86_64/mongodb.log'
alias scassandra='/opt/cassandra/bin/cassandra -f'
alias sredis='redis-server ~/Sites/Codes/homebrew/etc/redis.conf'

# replacement netstat cmd to find ports used by apps on OS X
alias netstat="sudo lsof -i -P"

alias colorslist="set | egrep 'COLOR_\w*'"  # lists all the colors

function deploy {
  echo "Current configuration is for `git config --get heroku.remote`"
  echo -n 'Continue? [yn] '
  read continue

  if [ $continue = 'y' ]; then
    git push `git config --get heroku.remote` `git config --get heroku.remote`:master
    heroku run rake db:migrate

    say Deploy finished!
  fi
}

function f() { find * -name $1; }

function p() {
  case "$1" in
    "--help")
      echo "To use this function:"
      echo "p project_name"
      echo "p --help (show this!)"
      echo "p --list (list all projects)"
      ;;
    "--list")
      for f in `ls -1 ~/Sites/`; do
        echo "Projects in $f:"
        for fin in `ls -1l ~/Sites/$f | grep "^d" | awk '{print $9}'`; do
          echo "  $fin"
        done
      done
      ;;
      *)
        for f in `ls -1 ~/Sites/`; do
          if [ -d ~/Sites/$f/$1 ]; then
            echo "Project found in $f"
            cd ~/Sites/$f/$1
            break
          else
            echo "Project not found in $f"
          fi
        done
      ;;
  esac
}

function run() {
  clear
  case "$1" in
    "units")  rspec spec/business && rspec spec/decorators && rspec spec/lib && rspec spec/importers && rspec spec/typecasters && rspec spec/enumerations && rspec spec/parsers && rspec spec/models
              ;;
    "business")  rspec spec/business
              ;;
    "models")  rspec spec/models
              ;;
    "enumerations")  rspec spec/enumerations
              ;;
    "models")  rspec spec/models
              ;;
    "presenters")  rspec spec/presenters
              ;;
    "requests") rspec spec/requests
                ;;
    *)  rspec $*
        ;;
  esac
  say Specs Finished!
}

function fr() {
  find $3 -type f -exec sed -i.bak "s#$1#$2#" {} \;
  find . -name '*.bak' -delete
}

function extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1        ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1       ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1     ;;
            *.tar)       tar xvf $1        ;;
            *.tbz2)      tar xvjf $1      ;;
            *.tgz)       tar xvzf $1       ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1    ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function manpdf() { man -t $@ | open -f -a Preview; }
function osinfo() { 
   x1="$(/usr/bin/sw_vers -productName)"
   x2="$(/usr/bin/sw_vers -productVersion)"
   x3="$(/usr/bin/sw_vers -buildVersion)"
   x4="$(/usr/bin/arch)"
   echo "${x1} - ${x2} - ${x3} - ${x4}"
}

alias configuration_changed='say Configured changed!'

function heroku_write {
  echo '[heroku]' > ~/.my_heroku_config
  echo "    remote=$1" >> ~/.my_heroku_config
  echo "$1 configurated"
  configuration_changed
}

function staging {
  heroku_write staging
  gco staging
}

function production {
  heroku_write production
  gco production
}

function training {
  heroku_write training
  gco training
}

alias ls='ls -G'
alias pubkey='cat ~/.ssh/*.pub | pbcopy && echo "Keys copied to clipboard"'
alias m='mate .'
alias et="m"
alias o='open .'
alias eprof="mate ~/.dot-files"
alias hidefile='/usr/bin/SetFile -a "V"'
alias showfile='/usr/bin/SetFile -a "v"'
alias startpg='sudo /Library/StartupItems/PostgreSQL/PostgreSQL start'
alias sync='rsync -v -r -u --progress /Users/caironoleto/Music/iTunes/iTunes\ Music/Books /Volumes/NO\ NAME'
alias mg='rails g migration'
alias munico='p unico && RAILS_ENV=development rake db:migrate && cd -'
alias pjs='phantomjs'
alias pis='ruby ~/Sites/MyApps/dot-files/pis_pasep_generator.rb'
alias update='bash ~/Sites/Nohup/conversoes/update.sh'
alias raposos='psql raposos_development'
alias pow='powder'
